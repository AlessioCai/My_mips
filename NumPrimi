
.data 0x10010000
numeri: .word 97, 85, 48, 1087, 101 #Numeri

.data 0x10010120
risultati: .space 84 #risultati

.text
main:
	#imposto lo stack pointer all'inizio dello stack
	addiu $sp, $zero, 0x7fffeffc
	la $s1, risultati
	la $s2, numeri
	li $s3, 0x10010014 #indirizzo di fine area di memoria dei numeri
Main_loop:
	lw $s0, ($s2)  #s0 = numero
	move $a0, $s0 #metto in a0 il numero da controllare
	jal Check_Primo
	bne $v0, $zero, Nuovo_Numero
N_Primo:	
	sw $s0, ($s1)
	addiu $s1, $s1, 4
Nuovo_Numero:
 	addiu $s2, $s2, 4
 	bne $s2, $s3, Main_loop   
	j End



Check_Primo: 
#dividi per due, trovi radice, loop da 3 a radice con incrementi di 2
	li $t0, 2
	div $a0, $t0
	mfhi $t0
	beq $t0, $zero, Non_Primo #se divisibile per due, non è primo
	addi $sp, $sp, -4
	sw $ra, ($sp) #salvo in memoria il ra prima di chiamare il secondo sottoprogramma
   	jal Radice
	lw $ra, ($sp) #riprendo il return address dallo stack
	addi $sp, $sp, 4 
	li $t1, 3
Loop_Primi:
	div $a0, $t1
	mfhi $t0
	beq $t0, $zero, Non_Primo #se N divisibile, non è primo
	addi $t1, $t1, 2
	ble $t1, $v0, Loop_Primi #controllo tutti i numeri dispari <= della radice di N
	Primo: 
	add $v0, $zero, $zero
	jr $ra
	Non_Primo:	
	addi $v0, $zero, 1
	jr $ra

Radice:
   # Inizializzo $t0 = n, $t1 = i = 0, $t2 = x = n = $a0, $t3 = n/2
add $t0, $zero, $a0
add $t1, $zero, $zero
add $t2, $zero, $a0
srl $t3, $t2, 1
Loop_Radice:
    div $t4, $t0, $t2 
    add $t4, $t4, $t2
    srl $t2, $t4, 1
    addi $t1, $t1, 1
    blt  $t1, $t3, Loop_Radice
    move $v0, $t2
    jr $ra
    
    
End: j End
